/*
 * Integrantes:
 * Arthur Silveira Chaves (Sistemas de Informação)
 * Beatriz Jonas Justino (Sistemas de Informação)
 * Nicholas Meirinho Perez (Sistemas de Informação)
 * 
 * Disciplina: Sistemas Operacionais I
 * 
 * Ultima data de modificação: 2020-04-06
 */

import java.io.PrintWriter;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;
import java.lang.management.ManagementFactory;
  
public class CombinatorialAnalysis { 
	public static double STD = (500/3);
	public static int MEAN = 500;
	public static long[] a;
	public static final String filename = "Combinations.txt";
	public static final String curDir = Paths.get(".").toAbsolutePath().normalize().toString();
	
  
	public static long[] createGaussianList(int N, PrintWriter pw) throws Exception {
	/*
	* Create and display a list of N Gaussian random numbers.
	*/
		Random r = new Random();
		long gauss_list[] = new long[N];
		pw.println("Numbers generated by a Gaussian Distribution");
		for (int i = 0; i < N; i++){
				gauss_list[i] = (long) Math.round((MEAN + (r.nextGaussian() * STD)));
				pw.print(gauss_list[i] + "    ");
		}
		pw.println();
		pw.println();
		return gauss_list;
	}
	
	public static class Thread1 extends Thread {
	/*
	* Recursion of combinations
	*/
		public int start;
		public int end;
		public int r;
		public int index;
		public long data[];
		public long arr[];
		private PrintWriter pw;

		public Thread1(int start, int end, int r, int index, long data[], long arr[], PrintWriter pw){
			this.start = start;
			this.end = end;
			this.r = r;
			this.index = index;
			this.pw = pw;
			this.data = data.clone();
			this.arr = arr;
		}

		@Override
		public synchronized void run(){
			List<Thread> threads = new ArrayList<Thread>();
			for (int i=start; i<=end && end-i+1 >= r-index; i++) 
			{ 
				data[index] = arr[i];
				threads.add(combination(arr, data, i+1, end, index+1, r, pw));
			}
			for(Thread t : threads) {
				try {
					t.join();
				} catch (InterruptedException e) {
				}
			}
			}
		}
	
	public static Thread combination(long arr[], long data[], int start, int end, int index, int r, PrintWriter pw){ 
	/*
	* Create combinations nCr.
	*/
		Thread T = new Thread1(start, end, r, index, data, arr, pw);
		if (index == r) 
		{
			synchronized(pw) {
				for (int j=0; j<r; j++) 
					pw.print(data[j]+" "); 
				pw.println(); 
			}
		}
		else 
		{
			T.start();
		}
		return T;
	} 
  
	
	public static void printCombination(long arr[], int n, int r, PrintWriter pw)
	/*
	* Create a list of combinations of nCr and store into a file.
	*/
	{
		long data[] = new long[r];
		Thread combination = combination(arr, data, 0, n-1, 0, r, pw);
		try {
			combination.join();
		} catch (InterruptedException e) {
		}
	} 

	public static void header(){
		System.out.println("+=============================================================+");
		System.out.println("|              Catholic University of Santos                  |");
		System.out.println("|                                                             |");
		System.out.println("|                     University Assigment                    |");
		System.out.println("|              Class/Subject: Operating Systems               |");
		System.out.println("|                        Semester: 5                          |");
		System.out.println("|                                                             |");
		System.out.println("|                        Developed by:                        |");
		System.out.println("|                  Arthur Silveira Chaves                     |");
		System.out.println("|                   Beatriz Jonas Justino                     |");
		System.out.println("|                  Nicholas Meirinho Perez                    |");
		System.out.println("|                                                             |");
		System.out.println("+=============================================================+");
		System.out.println("|                                                             |");
		System.out.println("|                      Application goal:                      |");
		System.out.println("|Generate Combinations of N and M with random Gaussian numbers|");
		System.out.println("|             Random Numbers between 0-1000                   |");
		System.out.println("|                                                             |");
		System.out.println("+=============================================================+");
	}

	public static void main (String[] args) throws Exception{
		header();
		Scanner sc = new Scanner(System.in);

		System.out.println("Enter N:");
		int N = sc.nextInt();
		
		System.out.println("Enter M:");
		int M = sc.nextInt();
		
		sc.close();

		PrintWriter pw = new PrintWriter(filename);

		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.SSSSSSSS");  
		LocalDateTime t1 = LocalDateTime.now();
		pw.println("Init Combinations:" + dtf.format(t1));

		a = createGaussianList(N, pw);
		
		pw.println("Combinations generated:");
		printCombination(a, N, M, pw);

		System.out.println("Your combinations are located at "+curDir+"/"+filename);

		LocalDateTime t2 = LocalDateTime.now();
		pw.print("Finish Combinations:" + dtf.format(t2));
		pw.close();
	} 
}
